name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          - os: macos-latest
            platform: darwin
            icon-ext: icns
          - os: windows-latest
            platform: win32
            icon-ext: ico
          - os: ubuntu-latest
            platform: linux
            icon-ext: png

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install python-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python --version
        pip --version
        echo "Installing requirements..."
        pip install -r requirements.txt
        echo "Installing PyInstaller..."
        pip install pyinstaller
        echo "Verifying installation..."
        python -c "import matplotlib, pandas, numpy, PIL, requests, psutil; print('All core packages imported successfully')"

    - name: Create assets directory
      run: |
        mkdir -p assets
        # Create placeholder icons if they don't exist
        if [ ! -f "assets/icon.${{ matrix.icon-ext }}" ]; then
          echo "Creating placeholder icon for ${{ matrix.platform }}"
          # This is a simple placeholder - you should add real icons
          touch "assets/icon.${{ matrix.icon-ext }}"
        fi

    - name: Build with PyInstaller
      run: |
        python build.py
        # Alternative: pyinstaller bounding_box_plotter.spec

    - name: List build artifacts
      run: |
        ls -la dist/
        if [ -d "dist/BoundingBoxPlotter.app" ]; then
          echo "macOS app bundle found"
          ls -la "dist/BoundingBoxPlotter.app/Contents/"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bounding-box-plotter-${{ matrix.platform }}-${{ matrix.python-version }}
        path: |
          dist/
          build/
        retention-days: 30

    - name: Test executable (basic)
      run: |
        if [ "${{ matrix.platform }}" = "darwin" ]; then
          # Test macOS app bundle
          if [ -d "dist/BoundingBoxPlotter.app" ]; then
            echo "✓ macOS app bundle created successfully"
          else
            echo "✗ macOS app bundle not found"
            exit 1
          fi
        elif [ "${{ matrix.platform }}" = "win32" ]; then
          # Test Windows executable
          if [ -f "dist/BoundingBoxPlotter/BoundingBoxPlotter.exe" ]; then
            echo "✓ Windows executable created successfully"
          else
            echo "✗ Windows executable not found"
            exit 1
          fi
        else
          # Test Linux executable
          if [ -f "dist/BoundingBoxPlotter/BoundingBoxPlotter" ]; then
            echo "✓ Linux executable created successfully"
          else
            echo "✗ Linux executable not found"
            exit 1
          fi
        fi

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/bounding-box-plotter-darwin-*/dist/*.app
          artifacts/bounding-box-plotter-win32-*/dist/*.exe
          artifacts/bounding-box-plotter-linux-*/dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false 