name: Release Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'           # Main releases (v1.0.0, v2.1.3, etc.)
      - 'v*.*.*_test'      # Test releases (v1.0.0_test, v2.1.3_test, etc.)
      - 'v*.*.*-beta*'     # Beta releases (v1.0.0-beta1, v2.1.3-beta2, etc.)
      - 'v*.*.*-alpha*'    # Alpha releases (v1.0.0-alpha1, v2.1.3-alpha2, etc.)

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r unified_plotter/requirements.txt
        pip install pyinstaller cx-freeze build twine
    
    - name: Build executable (Cross-platform)
      shell: bash
      run: |
        cd unified_plotter
        echo "üî® Building release for ${{ matrix.os }}..."
        echo "Tag: ${{ github.ref_name }}"
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        echo "Running build script..."
        python build_ci.py || echo "Build completed with warnings"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unified-plotter-${{ matrix.os }}-${{ github.ref_name }}
        path: |
          unified_plotter/dist/
          unified_plotter/build/

  package:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r unified_plotter/requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        cd unified_plotter
        python -m build
    
    - name: Check package
      run: |
        cd unified_plotter
        twine check dist/*
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ github.ref_name }}
        path: unified_plotter/dist/

  release:
    needs: [build, package]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Determine release type
      id: release_type
      run: |
        TAG_NAME="${{ github.ref_name }}"
        if [[ "$TAG_NAME" == *"_test" ]]; then
          echo "type=test" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Test Release $TAG_NAME" >> $GITHUB_OUTPUT
        elif [[ "$TAG_NAME" == *"-beta"* ]]; then
          echo "type=beta" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Beta Release $TAG_NAME" >> $GITHUB_OUTPUT
        elif [[ "$TAG_NAME" == *"-alpha"* ]]; then
          echo "type=alpha" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Alpha Release $TAG_NAME" >> $GITHUB_OUTPUT
        else
          echo "type=stable" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "title=Release $TAG_NAME" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ steps.release_type.outputs.title }}
        body: |
          ## üöÄ ${{ steps.release_type.outputs.title }}
          
          **Release Type:** ${{ steps.release_type.outputs.type }}
          **Tag:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          
          ## üì¶ Downloads
          
          ### Executables
          - **Windows:** `unified-plotter-windows-latest-${{ github.ref_name }}.zip`
          - **macOS:** `unified-plotter-macos-latest-${{ github.ref_name }}.zip`
          - **Linux:** `unified-plotter-ubuntu-latest-${{ github.ref_name }}.zip`
          
          ### Python Package
          - **Source Distribution:** `unified-plotter-*.tar.gz`
          - **Wheel:** `unified-plotter-*.whl`
          
          ## üîß Installation
          
          ### From Executable
          1. Download the appropriate executable for your platform
          2. Extract and run `unified-plotter` (or `unified-plotter.exe` on Windows)
          
          ### From Python Package
          ```bash
          pip install unified-plotter
          ```
          
          ## ‚úÖ Features
          - Cross-platform GUI application
          - CSV data visualization
          - Interactive plotting
          - Settings management
          - Automated builds and testing
          
          ## üêõ Bug Reports
          Please report issues at: https://github.com/Raghavendra-Pratap/Plotter/issues
        draft: false
        prerelease: ${{ steps.release_type.outputs.prerelease }}
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts
        asset_name: unified-plotter-${{ github.ref_name }}-artifacts.zip
        asset_content_type: application/zip