name: Release Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'           # Main releases (v1.0.0, v2.1.3, etc.)
      - 'v*.*.*_test'      # Test releases (v1.0.0_test, v2.1.3_test, etc.)
      - 'v*.*.*-beta*'     # Beta releases (v1.0.0-beta1, v2.1.3-beta2, etc.)
      - 'v*.*.*-alpha*'    # Alpha releases (v1.0.0-alpha1, v2.1.3-alpha2, etc.)

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false  # Disable submodules to avoid Git issues
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r unified_plotter/requirements.txt
        pip install pyinstaller cx-freeze build twine
    
    - name: Build executable (Cross-platform)
      shell: bash
      run: |
        cd unified_plotter
        echo "🔨 Building release for ${{ matrix.os }}..."
        echo "Tag: ${{ github.ref_name }}"
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
        # Create dist directory
        mkdir -p dist
        
        # Determine the correct separator for --add-data based on OS
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          DATA_SEP=";"
          echo "Using Windows separator (;) for --add-data"
        else
          DATA_SEP=":"
          echo "Using Unix separator (:) for --add-data"
        fi
        
        # Simple PyInstaller build with OS-specific syntax
        echo "🚀 Running PyInstaller directly..."
        pyinstaller --onefile --windowed --name unified-plotter --hidden-import=PIL._tkinter_finder --hidden-import=matplotlib.backends._tkagg --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --add-data="version.py${DATA_SEP}." --distpath=./dist --workpath=./build unified-plotter.py
        
        echo "Build completed successfully!"
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Looking for executables:"
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          find dist -name "*.exe" || echo "No .exe files found"
        else
          find dist -name "unified-plotter" -o -name "*.app" || echo "No executables found"
        fi

    - name: Prepare release artifacts
      shell: bash
      run: |
        cd unified_plotter
        echo "📦 Preparing release artifacts for ${{ matrix.os }}..."
        
        # Create a clean release directory
        mkdir -p ../release-artifacts
        
        # Copy only the executable files (not build artifacts)
        if [ -d "dist" ]; then
          echo "📁 Contents of dist directory:"
          ls -la dist/
          
          # Find the main executable (cross-platform approach)
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            # Windows: look for .exe files
            find dist -name "*.exe" -exec cp {} ../release-artifacts/unified-plotter-windows.exe \;
            echo "Windows executable copied"
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            # macOS: look for unified-plotter file and .app bundles
            find dist -name "unified-plotter" -type f -exec cp {} ../release-artifacts/unified-plotter-macos \;
            find dist -name "*.app" -exec cp -r {} ../release-artifacts/ \;
            echo "macOS executable copied"
          else
            # Linux: look for unified-plotter file
            find dist -name "unified-plotter" -type f -exec cp {} ../release-artifacts/unified-plotter-linux \;
            chmod +x ../release-artifacts/unified-plotter-linux
            echo "Linux executable copied"
          fi
        fi
        
        echo "📋 Release artifacts prepared:"
        ls -la ../release-artifacts/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unified-plotter-${{ matrix.os }}-${{ github.ref_name }}
        path: release-artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Organize release files
      shell: bash
      run: |
        echo "📁 Organizing release files..."
        mkdir -p ./release-files
        
        echo "🔍 Available artifacts:"
        find artifacts -type f -name "*" | head -20
        
        # Organize platform-specific executables
        for artifact_dir in artifacts/*/; do
          if [ -d "$artifact_dir" ]; then
            platform=$(basename "$artifact_dir" | sed 's/unified-plotter-\(.*\)-.*/\1/')
            echo "Processing platform: $platform"
            echo "Contents of $artifact_dir:"
            ls -la "$artifact_dir" || echo "Directory not found or empty"
            
            # Copy executables to organized structure
            if [ "$platform" == "windows-latest" ]; then
              echo "Looking for Windows executables..."
              find "$artifact_dir" -name "*.exe" -exec cp {} ./release-files/unified-plotter-windows.exe \;
              find "$artifact_dir" -name "*.dll" -exec cp {} ./release-files/ \;
            elif [ "$platform" == "macos-latest" ]; then
              echo "Looking for macOS executables..."
              find "$artifact_dir" -name "unified-plotter-macos" -exec cp {} ./release-files/unified-plotter-macos \;
              find "$artifact_dir" -name "*.app" -exec cp -r {} ./release-files/ \;
              find "$artifact_dir" -name "*.dylib" -exec cp {} ./release-files/ \;
            elif [ "$platform" == "ubuntu-latest" ]; then
              echo "Looking for Linux executables..."
              find "$artifact_dir" -name "unified-plotter-linux" -exec cp {} ./release-files/unified-plotter-linux \;
              find "$artifact_dir" -name "*.so" -exec cp {} ./release-files/ \;
            fi
          fi
        done
        
        # Make executables executable
        chmod +x ./release-files/* 2>/dev/null || true
        
        echo "📋 Final release files:"
        ls -la ./release-files/
    
    - name: Determine release type
      id: release_type
      run: |
        TAG_NAME="${{ github.ref_name }}"
        if [[ "$TAG_NAME" == *"_test" ]]; then
          echo "type=test" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Test Release $TAG_NAME" >> $GITHUB_OUTPUT
        elif [[ "$TAG_NAME" == *"-beta"* ]]; then
          echo "type=beta" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Beta Release $TAG_NAME" >> $GITHUB_OUTPUT
        elif [[ "$TAG_NAME" == *"-alpha"* ]]; then
          echo "type=alpha" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Alpha Release $TAG_NAME" >> $GITHUB_OUTPUT
        else
          echo "type=stable" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "title=Release $TAG_NAME" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup GitHub CLI
      run: |
        echo "🔧 Setting up GitHub CLI..."
        # Install GitHub CLI
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install gh -y
        
        # Authenticate with GitHub token
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
        echo "✅ GitHub CLI setup complete"
        gh --version

    - name: Create Release
      run: |
        echo "🚀 Creating release ${{ github.ref_name }}..."
        
        # Create release using GitHub CLI
        gh release create ${{ github.ref_name }} \
          --title "${{ steps.release_type.outputs.title }}" \
          --notes "## 🚀 ${{ steps.release_type.outputs.title }}
          
          **Release Type:** ${{ steps.release_type.outputs.type }}
          **Tag:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          
          ## 📦 Downloads
          
          ### 🖥️ Platform-Specific Executables
          - **Windows:** \`unified-plotter-windows.exe\` - Download and run directly on Windows
          - **macOS:** \`unified-plotter-macos\` - Download and run directly on macOS
          - **Linux:** \`unified-plotter-linux\` - Download and run directly on Linux
          
          ## 🔧 Installation
          
          ### From Executable
          1. Download the appropriate executable for your platform
          2. Run the executable directly (no installation required)
          
          ## ✅ Features
          - Cross-platform GUI application
          - CSV data visualization
          - Interactive plotting
          - Settings management
          - Automated builds and testing
          
          ## 🐛 Bug Reports
          Please report issues at: https://github.com/Raghavendra-Pratap/Plotter/issues" \
          ${{ steps.release_type.outputs.prerelease == 'true' && '--prerelease' || '' }} || echo "Release creation completed with warnings"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Release Assets
      shell: bash
      run: |
        echo "📤 Uploading individual platform executables..."
        
        # Upload individual platform executables using GitHub CLI
        if [ -f "./release-files/unified-plotter-windows.exe" ]; then
          echo "Uploading Windows executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-windows.exe
        fi
        
        if [ -f "./release-files/unified-plotter-macos" ]; then
          echo "Uploading macOS executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-macos
        fi
        
        if [ -f "./release-files/unified-plotter-linux" ]; then
          echo "Uploading Linux executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-linux
        fi
        
        # Upload any .app bundles for macOS
        if [ -d "./release-files" ]; then
          find ./release-files -name "*.app" -exec gh release upload ${{ github.ref_name }} {} \;
        fi
        
        # No combined package - only individual platform executables
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}