name: Release Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'           # Main releases (v1.0.0, v2.1.3, etc.)
      - 'v*.*.*_test'      # Test releases (v1.0.0_test, v2.1.3_test, etc.)
      - 'v*.*.*-beta*'     # Beta releases (v1.0.0-beta1, v2.1.3-beta2, etc.)
      - 'v*.*.*-alpha*'    # Alpha releases (v1.0.0-alpha1, v2.1.3-alpha2, etc.)

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false  # Disable submodules to avoid Git issues
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r unified_plotter/requirements.txt
        pip install pyinstaller cx-freeze build twine
    
    - name: Build executable (Cross-platform)
      shell: bash
      run: |
        cd unified_plotter
        echo "üî® Building release for ${{ matrix.os }}..."
        echo "Tag: ${{ github.ref_name }}"
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
        # Create dist directory
        mkdir -p dist
        
        # Determine the correct separator for --add-data based on OS
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          DATA_SEP=";"
          echo "Using Windows separator (;) for --add-data"
        else
          DATA_SEP=":"
          echo "Using Unix separator (:) for --add-data"
        fi
        
        # PyInstaller build with platform-specific installer creation
        echo "üöÄ Running PyInstaller with installer creation..."
        
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Windows: Create .exe installer
          pyinstaller --onefile --windowed --name unified-plotter --hidden-import=PIL._tkinter_finder --hidden-import=matplotlib.backends._tkagg --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --add-data="version.py${DATA_SEP}." --distpath=./dist --workpath=./build unified-plotter.py
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          # macOS: Create .app bundle (can be converted to .dmg)
          pyinstaller --onefile --windowed --name unified-plotter --hidden-import=PIL._tkinter_finder --hidden-import=matplotlib.backends._tkagg --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --add-data="version.py${DATA_SEP}." --distpath=./dist --workpath=./build unified-plotter.py
        else
          # Linux: Create AppImage
          pyinstaller --onefile --windowed --name unified-plotter --hidden-import=PIL._tkinter_finder --hidden-import=matplotlib.backends._tkagg --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --add-data="version.py${DATA_SEP}." --distpath=./dist --workpath=./build unified-plotter.py
        fi
        
        echo "Build completed successfully!"
        echo "Contents of dist directory:"
        ls -la dist/
        
        # Create platform-specific installers
        echo "üì¶ Creating platform-specific installers..."
        
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Windows: Rename .exe to proper installer name
          find dist -name "*.exe" -exec cp {} dist/unified-plotter-windows-installer.exe \;
          echo "Windows installer created: unified-plotter-windows-installer.exe"
          
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          # macOS: Create .dmg from .app bundle
          echo "Creating macOS .dmg installer..."
          
          # Install create-dmg if not available
          if ! command -v create-dmg &> /dev/null; then
            echo "Installing create-dmg..."
            brew install create-dmg || echo "create-dmg installation failed, will create .app bundle instead"
          fi
          
          # Find the .app bundle
          APP_BUNDLE=$(find dist -name "*.app" | head -1)
          if [ -n "$APP_BUNDLE" ]; then
            echo "Found app bundle: $APP_BUNDLE"
            # Try to create .dmg, fallback to .app if it fails
            create-dmg --volname "Unified Plotter" --window-pos 200 120 --window-size 600 300 --icon-size 100 --icon "Unified Plotter.app" 175 120 --hide-extension "Unified Plotter.app" --app-drop-link 425 120 dist/unified-plotter-macos.dmg dist/ || {
              echo "create-dmg failed, copying .app bundle instead"
              cp -r "$APP_BUNDLE" dist/unified-plotter-macos.app
            }
          else
            echo "No .app bundle found, looking for executable"
            find dist -name "unified-plotter" -exec cp {} dist/unified-plotter-macos \;
          fi
          
        else
          # Linux: Create AppImage
          echo "Creating Linux AppImage..."
          
          # Install appimagetool if not available
          if ! command -v appimagetool &> /dev/null; then
            echo "Installing appimagetool..."
            wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
            chmod +x appimagetool-x86_64.AppImage
            sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool
          fi
          
          # Find the executable
          EXECUTABLE=$(find dist -name "unified-plotter" -type f | head -1)
          if [ -n "$EXECUTABLE" ]; then
            echo "Found executable: $EXECUTABLE"
            # Create AppImage
            appimagetool "$EXECUTABLE" dist/unified-plotter-linux.AppImage || {
              echo "AppImage creation failed, copying executable instead"
              cp "$EXECUTABLE" dist/unified-plotter-linux
            }
          else
            echo "No executable found"
          fi
        fi
        
        echo "Final installer files:"
        ls -la dist/

    - name: Prepare release artifacts
      shell: bash
      run: |
        cd unified_plotter
        echo "üì¶ Preparing release artifacts for ${{ matrix.os }}..."
        
        # Create a clean release directory
        mkdir -p ../release-artifacts
        
        # Copy only the executable files (not build artifacts)
        if [ -d "dist" ]; then
          echo "üìÅ Contents of dist directory:"
          ls -la dist/
          
          # Find the main executable (cross-platform approach)
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            # Windows: look for .exe files
            find dist -name "*.exe" -exec cp {} ../release-artifacts/unified-plotter-windows.exe \;
            echo "Windows executable copied"
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            # macOS: look for unified-plotter file and .app bundles
            find dist -name "unified-plotter" -type f -exec cp {} ../release-artifacts/unified-plotter-macos \;
            find dist -name "*.app" -exec cp -r {} ../release-artifacts/ \;
            echo "macOS executable copied"
          else
            # Linux: look for unified-plotter file
            find dist -name "unified-plotter" -type f -exec cp {} ../release-artifacts/unified-plotter-linux \;
            chmod +x ../release-artifacts/unified-plotter-linux
            echo "Linux executable copied"
          fi
        fi
        
        echo "üìã Release artifacts prepared:"
        ls -la ../release-artifacts/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unified-plotter-${{ matrix.os }}-${{ github.ref_name }}
        path: release-artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Organize release files
      shell: bash
      run: |
        echo "üìÅ Organizing release files..."
        mkdir -p ./release-files
        
        echo "üîç Available artifacts:"
        find artifacts -type f -name "*" | head -20
        
        # Organize platform-specific executables
        for artifact_dir in artifacts/*/; do
          if [ -d "$artifact_dir" ]; then
            platform=$(basename "$artifact_dir" | sed 's/unified-plotter-\(.*\)-.*/\1/')
            echo "Processing platform: $platform"
            echo "Contents of $artifact_dir:"
            ls -la "$artifact_dir" || echo "Directory not found or empty"
            
            # Copy installers to organized structure
            if [ "$platform" == "windows-latest" ]; then
              echo "Looking for Windows installers..."
              find "$artifact_dir" -name "*windows-installer.exe" -exec cp {} ./release-files/unified-plotter-windows-installer.exe \;
              find "$artifact_dir" -name "*.exe" -exec cp {} ./release-files/unified-plotter-windows.exe \;
            elif [ "$platform" == "macos-latest" ]; then
              echo "Looking for macOS installers..."
              find "$artifact_dir" -name "*.dmg" -exec cp {} ./release-files/unified-plotter-macos.dmg \;
              find "$artifact_dir" -name "*.app" -exec cp -r {} ./release-files/unified-plotter-macos.app \;
              find "$artifact_dir" -name "unified-plotter-macos" -exec cp {} ./release-files/unified-plotter-macos \;
            elif [ "$platform" == "ubuntu-latest" ]; then
              echo "Looking for Linux installers..."
              find "$artifact_dir" -name "*.AppImage" -exec cp {} ./release-files/unified-plotter-linux.AppImage \;
              find "$artifact_dir" -name "unified-plotter-linux" -exec cp {} ./release-files/unified-plotter-linux \;
            fi
          fi
        done
        
        # Make executables executable
        chmod +x ./release-files/* 2>/dev/null || true
        
        echo "üìã Final release files:"
        ls -la ./release-files/
    
    - name: Determine release type
      id: release_type
      run: |
        TAG_NAME="${{ github.ref_name }}"
        if [[ "$TAG_NAME" == *"_test" ]]; then
          echo "type=test" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Test Release $TAG_NAME" >> $GITHUB_OUTPUT
        elif [[ "$TAG_NAME" == *"-beta"* ]]; then
          echo "type=beta" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Beta Release $TAG_NAME" >> $GITHUB_OUTPUT
        elif [[ "$TAG_NAME" == *"-alpha"* ]]; then
          echo "type=alpha" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Alpha Release $TAG_NAME" >> $GITHUB_OUTPUT
        else
          echo "type=stable" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "title=Release $TAG_NAME" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup GitHub CLI
      run: |
        echo "üîß Setting up GitHub CLI..."
        # Install GitHub CLI
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install gh -y
        
        # Authenticate with GitHub token
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
        echo "‚úÖ GitHub CLI setup complete"
        gh --version

    - name: Create Release
      run: |
        echo "üöÄ Creating release ${{ github.ref_name }}..."
        
        # Create release using GitHub CLI
        gh release create ${{ github.ref_name }} \
          --title "${{ steps.release_type.outputs.title }}" \
          --notes "## üöÄ ${{ steps.release_type.outputs.title }}
          
          **Release Type:** ${{ steps.release_type.outputs.type }}
          **Tag:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          
          ## üì¶ Downloads
          
          ### üñ•Ô∏è Platform-Specific Installers
          - **Windows:** \`unified-plotter-windows-installer.exe\` - Windows installer (.exe)
          - **macOS:** \`unified-plotter-macos.dmg\` - macOS disk image (.dmg)
          - **Linux:** \`unified-plotter-linux.AppImage\` - Linux AppImage
          
          ## üîß Installation
          
          ### From Executable
          1. Download the appropriate executable for your platform
          2. Run the executable directly (no installation required)
          
          ## ‚úÖ Features
          - Cross-platform GUI application
          - CSV data visualization
          - Interactive plotting
          - Settings management
          - Automated builds and testing
          
          ## üêõ Bug Reports
          Please report issues at: https://github.com/Raghavendra-Pratap/Plotter/issues" \
          ${{ steps.release_type.outputs.prerelease == 'true' && '--prerelease' || '' }} || echo "Release creation completed with warnings"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Release Assets
      shell: bash
      run: |
        echo "üì§ Uploading individual platform executables..."
        
        # Upload individual platform installers using GitHub CLI
        if [ -f "./release-files/unified-plotter-windows-installer.exe" ]; then
          echo "Uploading Windows installer..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-windows-installer.exe
        elif [ -f "./release-files/unified-plotter-windows.exe" ]; then
          echo "Uploading Windows executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-windows.exe
        fi
        
        if [ -f "./release-files/unified-plotter-macos.dmg" ]; then
          echo "Uploading macOS .dmg installer..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-macos.dmg
        elif [ -d "./release-files/unified-plotter-macos.app" ]; then
          echo "Uploading macOS .app bundle..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-macos.app
        elif [ -f "./release-files/unified-plotter-macos" ]; then
          echo "Uploading macOS executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-macos
        fi
        
        if [ -f "./release-files/unified-plotter-linux.AppImage" ]; then
          echo "Uploading Linux AppImage..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-linux.AppImage
        elif [ -f "./release-files/unified-plotter-linux" ]; then
          echo "Uploading Linux executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-linux
        fi
        
        # No combined package - only individual platform installers
        
        # Hide source code files by deleting them
        echo "üóëÔ∏è Removing source code files from release..."
        gh release delete-asset ${{ github.ref_name }} "Source code (zip)" || echo "Source code zip not found or already removed"
        gh release delete-asset ${{ github.ref_name }} "Source code (tar.gz)" || echo "Source code tar.gz not found or already removed"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}