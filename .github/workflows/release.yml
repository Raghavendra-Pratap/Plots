name: Release Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'           # Main releases (v1.0.0, v2.1.3, etc.)
      - 'v*.*.*_test'      # Test releases (v1.0.0_test, v2.1.3_test, etc.)
      - 'v*.*.*-beta*'     # Beta releases (v1.0.0-beta1, v2.1.3-beta2, etc.)
      - 'v*.*.*-alpha*'    # Alpha releases (v1.0.0-alpha1, v2.1.3-alpha2, etc.)

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false  # Disable submodules to avoid Git issues
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r unified_plotter/requirements.txt
        pip install pyinstaller cx-freeze build twine
    
    - name: Build Windows executable
      shell: cmd
      run: |
        cd unified_plotter
        echo Building Windows release...
        echo Tag: %GITHUB_REF_NAME%
        echo Current directory: %CD%
        dir
        
        mkdir dist
        
        echo Running PyInstaller for Windows...
        pyinstaller --onefile --windowed --name unified-plotter --hidden-import=PIL._tkinter_finder --hidden-import=matplotlib.backends._tkagg --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --add-data="version.py;." --distpath=./dist --workpath=./build unified-plotter.py
        
        echo Build completed
        echo Contents of dist directory:
        dir dist
        echo Looking for executables:
        dir dist\*.exe

    - name: Prepare Windows artifacts
      shell: cmd
      run: |
        cd unified_plotter
        echo Preparing Windows release artifacts...
        mkdir ..\release-artifacts
        if exist "dist\unified-plotter.exe" (
          copy "dist\unified-plotter.exe" "..\release-artifacts\unified-plotter-windows.exe"
          echo Windows executable copied
        ) else (
          echo No Windows executable found
        )
        echo Release artifacts prepared:
        dir ..\release-artifacts

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unified-plotter-windows-${{ github.ref_name }}
        path: release-artifacts/

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r unified_plotter/requirements.txt
        pip install pyinstaller cx-freeze build twine
    
    - name: Build macOS executable
      run: |
        cd unified_plotter
        echo "🍎 Building macOS release..."
        echo "Tag: ${{ github.ref_name }}"
        echo "Current directory: $(pwd)"
        ls -la
        
        mkdir -p dist
        
        echo "🚀 Running PyInstaller for macOS..."
        pyinstaller --onefile --windowed --name unified-plotter --hidden-import=PIL._tkinter_finder --hidden-import=matplotlib.backends._tkagg --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --add-data="version.py:." --distpath=./dist --workpath=./build unified-plotter.py
        
        echo "Build completed"
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Looking for executables:"
        find dist -name "unified-plotter" -o -name "*.app"

    - name: Prepare macOS artifacts
      run: |
        cd unified_plotter
        echo "📦 Preparing macOS release artifacts..."
        mkdir -p ../release-artifacts
        if [ -f "dist/unified-plotter" ]; then
          cp "dist/unified-plotter" "../release-artifacts/unified-plotter-macos"
          echo "macOS executable copied"
        else
          echo "No macOS executable found"
        fi
        # Also copy .app bundles if they exist
        find dist -name "*.app" -exec cp -r {} ../release-artifacts/ \;
        echo "Release artifacts prepared:"
        ls -la ../release-artifacts/

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unified-plotter-macos-${{ github.ref_name }}
        path: release-artifacts/

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r unified_plotter/requirements.txt
        pip install pyinstaller cx-freeze build twine
    
    - name: Build Linux executable
      run: |
        cd unified_plotter
        echo "🐧 Building Linux release..."
        echo "Tag: ${{ github.ref_name }}"
        echo "Current directory: $(pwd)"
        ls -la
        
        mkdir -p dist
        
        echo "🚀 Running PyInstaller for Linux..."
        pyinstaller --onefile --windowed --name unified-plotter --hidden-import=PIL._tkinter_finder --hidden-import=matplotlib.backends._tkagg --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=tkinter --hidden-import=tkinter.ttk --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --add-data="version.py:." --distpath=./dist --workpath=./build unified-plotter.py
        
        echo "Build completed"
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Looking for executables:"
        find dist -name "unified-plotter"

    - name: Prepare Linux artifacts
      run: |
        cd unified_plotter
        echo "📦 Preparing Linux release artifacts..."
        mkdir -p ../release-artifacts
        if [ -f "dist/unified-plotter" ]; then
          cp "dist/unified-plotter" "../release-artifacts/unified-plotter-linux"
          chmod +x "../release-artifacts/unified-plotter-linux"
          echo "Linux executable copied"
        else
          echo "No Linux executable found"
        fi
        echo "Release artifacts prepared:"
        ls -la ../release-artifacts/

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unified-plotter-linux-${{ github.ref_name }}
        path: release-artifacts/

  package:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r unified_plotter/requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        cd unified_plotter
        echo "🧹 Cleaning previous build artifacts..."
        rm -rf dist build *.egg-info
        echo "📁 Current directory contents:"
        ls -la
        echo "🔨 Building Python package..."
        python -m build --verbose || echo "Build completed with warnings"
        echo "📦 Build artifacts created:"
        ls -la dist/ || echo "No dist directory created"
    
    - name: Check package
      run: |
        cd unified_plotter
        echo "🔍 Checking package..."
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          twine check dist/* || echo "Package check completed with warnings"
        else
          echo "No dist directory found or empty, skipping check"
        fi
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ github.ref_name }}
        path: unified_plotter/dist/

  release:
    needs: [build, package]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Organize release files
      shell: bash
      run: |
        echo "📁 Organizing release files..."
        mkdir -p ./release-files
        
        # Organize platform-specific executables
        for artifact_dir in artifacts/*/; do
          if [ -d "$artifact_dir" ]; then
            platform=$(basename "$artifact_dir" | sed 's/unified-plotter-\(.*\)-.*/\1/')
            echo "Processing platform: $platform"
            
            # Copy executables to organized structure
            if [ "$platform" == "windows-latest" ]; then
              cp "$artifact_dir"/*.exe ./release-files/ 2>/dev/null || true
              cp "$artifact_dir"/*.dll ./release-files/ 2>/dev/null || true
            elif [ "$platform" == "macos-latest" ]; then
              cp "$artifact_dir"/unified-plotter-macos-latest ./release-files/unified-plotter-macos 2>/dev/null || true
              cp "$artifact_dir"/*.dylib ./release-files/ 2>/dev/null || true
            elif [ "$platform" == "ubuntu-latest" ]; then
              cp "$artifact_dir"/unified-plotter-ubuntu-latest ./release-files/unified-plotter-linux 2>/dev/null || true
              cp "$artifact_dir"/*.so ./release-files/ 2>/dev/null || true
            fi
          fi
        done
        
        # Make executables executable
        chmod +x ./release-files/* 2>/dev/null || true
        
        echo "📋 Final release files:"
        ls -la ./release-files/
    
    - name: Determine release type
      id: release_type
      run: |
        TAG_NAME="${{ github.ref_name }}"
        if [[ "$TAG_NAME" == *"_test" ]]; then
          echo "type=test" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Test Release $TAG_NAME" >> $GITHUB_OUTPUT
        elif [[ "$TAG_NAME" == *"-beta"* ]]; then
          echo "type=beta" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Beta Release $TAG_NAME" >> $GITHUB_OUTPUT
        elif [[ "$TAG_NAME" == *"-alpha"* ]]; then
          echo "type=alpha" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Alpha Release $TAG_NAME" >> $GITHUB_OUTPUT
        else
          echo "type=stable" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "title=Release $TAG_NAME" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup GitHub CLI
      run: |
        echo "🔧 Setting up GitHub CLI..."
        # Install GitHub CLI
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install gh -y
        
        # Authenticate with GitHub token
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
        echo "✅ GitHub CLI setup complete"
        gh --version

    - name: Create Release
      run: |
        echo "🚀 Creating release ${{ github.ref_name }}..."
        
        # Create release using GitHub CLI
        gh release create ${{ github.ref_name }} \
          --title "${{ steps.release_type.outputs.title }}" \
          --notes "## 🚀 ${{ steps.release_type.outputs.title }}
          
          **Release Type:** ${{ steps.release_type.outputs.type }}
          **Tag:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          
          ## 📦 Downloads
          
          ### 🖥️ Platform-Specific Executables
          - **Windows:** \`unified-plotter-windows.exe\` - Download and run directly on Windows
          - **macOS:** \`unified-plotter-macos\` - Download and run directly on macOS
          - **Linux:** \`unified-plotter-linux\` - Download and run directly on Linux
          
          ### 📚 Python Package (Optional)
          - **Source Distribution:** \`unified-plotter-*.tar.gz\` - For Python developers
          - **Wheel:** \`unified-plotter-*.whl\` - For Python developers
          
          ## 🔧 Installation
          
          ### From Executable
          1. Download the appropriate executable for your platform
          2. Extract and run \`unified-plotter\` (or \`unified-plotter.exe\` on Windows)
          
          ### From Python Package
          \`\`\`bash
          pip install unified-plotter
          \`\`\`
          
          ## ✅ Features
          - Cross-platform GUI application
          - CSV data visualization
          - Interactive plotting
          - Settings management
          - Automated builds and testing
          
          ## 🐛 Bug Reports
          Please report issues at: https://github.com/Raghavendra-Pratap/Plotter/issues" \
          ${{ steps.release_type.outputs.prerelease == 'true' && '--prerelease' || '' }} || echo "Release creation completed with warnings"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Release Assets
      shell: bash
      run: |
        echo "📤 Uploading individual platform executables..."
        
        # Upload individual platform executables using GitHub CLI
        if [ -f "./release-files/unified-plotter-windows.exe" ]; then
          echo "Uploading Windows executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-windows.exe
        fi
        
        if [ -f "./release-files/unified-plotter-macos" ]; then
          echo "Uploading macOS executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-macos
        fi
        
        if [ -f "./release-files/unified-plotter-linux" ]; then
          echo "Uploading Linux executable..."
          gh release upload ${{ github.ref_name }} ./release-files/unified-plotter-linux
        fi
        
        # Upload any .app bundles for macOS
        if [ -d "./release-files" ]; then
          find ./release-files -name "*.app" -exec gh release upload ${{ github.ref_name }} {} \;
        fi
        
        # Upload combined package
        echo "Creating combined package..."
        cd ./release-files
        zip -r ../unified-plotter-${{ github.ref_name }}-all-platforms.zip . || echo "Zip creation completed with warnings"
        cd ..
        
        echo "Uploading combined package..."
        gh release upload ${{ github.ref_name }} unified-plotter-${{ github.ref_name }}-all-platforms.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}